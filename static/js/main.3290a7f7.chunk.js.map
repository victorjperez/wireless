{"version":3,"sources":["../node_modules/pdfjs-dist/build sync","resources/zine_hq.pdf","resources/zine_lq.pdf","resources/wirelesslogo.svg","logo.svg","components/PageViewer.jsx","components/LandingScreen.jsx","components/PdfHandler.jsx","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","pdfjs","GlobalWorkerOptions","workerSrc","version","PageViewer","state","numPages","pageNumber","onDocumentLoadSuccess","document","setState","changePage","offset","prevState","previousSinglePage","previousDoublePage","nextSinglePage","nextDoublePage","this","pdfWidth","documentElement","clientWidth","Fragment","file","props","pdf","onLoadSuccess","loading","width","type","disabled","onClick","Component","LandingScreen","className","src","logo","alt","PdfHandler","useState","quality","setQuality","href","pdfHigh","pdfLow","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3290a7f7.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 21;","module.exports = __webpack_public_path__ + \"static/media/zine_hq.9cb31743.pdf\";","module.exports = __webpack_public_path__ + \"static/media/zine_lq.0f316068.pdf\";","module.exports = __webpack_public_path__ + \"static/media/wirelesslogo.bcaba2fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Document, Page } from 'react-pdf';\nimport { pdfjs } from 'react-pdf';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\n\nclass PageViewer extends Component {\n  state = {\n    numPages: null,\n    pageNumber: 1,\n  }\n\n  onDocumentLoadSuccess = (document) => {\n    const { numPages } = document;\n    this.setState({\n      numPages,\n      pageNumber: 1,\n    });\n  };\n\n  changePage = offset => this.setState(prevState => ({\n    pageNumber: prevState.pageNumber + offset,\n  }));\n\n  previousSinglePage = () => this.changePage(-1);\n  previousDoublePage = () => this.changePage(-2);\n  nextSinglePage = () => this.changePage(1);\n  nextDoublePage = () => this.changePage(2);\n  \n  render() {\n    const { numPages, pageNumber } = this.state;\n    let pdfWidth = document.documentElement.clientWidth;\n    if (pdfWidth > 600 ) pdfWidth = pdfWidth/2;\n    return (\n      <React.Fragment>\n        <Document\n          file={this.props.pdf}\n          onLoadSuccess={this.onDocumentLoadSuccess}\n          loading={\"Loading zine... Taking too long? Try again using lower quality.\"}\n        >\n          <Page pageNumber={pageNumber} width={pdfWidth}/>\n          {pageNumber === 1 || pageNumber+1 > numPages? '' : (<Page  pageNumber={pageNumber+1} width={pdfWidth}/>)}\n        </Document>\n        <footer>\n          <h1>\n           {pageNumber || (numPages ? 1 : '--')} / {numPages || '--'}\n\n          </h1>\n          {pageNumber === 1 ? \n          (<button\n            type=\"button\"\n            disabled={pageNumber <= 1}\n            onClick={this.previousSinglePage}\n          >\n            Previous\n          </button>) :\n          (<button\n            type=\"button\"\n            disabled={pageNumber <= 1}\n            onClick={this.previousDoublePage}\n          >\n            Previous\n          </button>)}\n\n          {pageNumber === 1 ? \n          (<button\n            type=\"button\"\n            disabled={pageNumber >= numPages}\n            onClick={this.nextSinglePage}\n          >\n            Next\n          </button>) :\n          (<button\n            type=\"button\"\n            disabled={pageNumber >= numPages}\n            onClick={this.nextDoublePage}\n          >\n            Next\n          </button>)}\n        </footer>\n      </React.Fragment>\n    );\n  }\n}\nexport default PageViewer;","import React from 'react';\n\nimport logo from '../resources/wirelesslogo.svg'\n\nfunction LandingScreen() {\n    return (\n        <React.Fragment>\n        <div className={'title-area'}>\n            <img src={logo} alt={\"wireless logo\"}/>\n            <h1>The Official Zine Of U92-FM</h1>\n            <h2>FALL SEMESTER 2019</h2>\n        </div>\n\n        </React.Fragment>);\n}\nexport default LandingScreen;","import React, {useState} from 'react';\nimport PageViewer from './PageViewer';\nimport LandingScreen from './LandingScreen';\nimport pdfHigh from '../resources/zine_hq.pdf';\nimport pdfLow from '../resources/zine_lq.pdf';\nfunction PdfHandler() {\n    const [quality, setQuality] = useState('');\n    if (quality === '') {\n    return(\n        <div>\n        <LandingScreen />  \n        <div className={\"pdf-selector\"}>\n            \n            <span>\n                <button onClick={() => setQuality('high')}>View High Quality</button>\n                <button onClick={() => setQuality('low')}>View Low Quality</button>\n            </span>\n            <span>\n                <button><a href={pdfHigh}>Download High Quality</a></button>\n                <button><a href={pdfLow}>Download Low Quality</a></button>\n            </span>\n        </div>\n        </div>\n    );}\n    else if (quality === 'high'){\n        return(<div className={\"pdf-view\"}><PageViewer pdf={pdfHigh} /><footer><button onClick={() => setQuality('')}>Home</button></footer></div>);\n    }\n    else if (quality === 'low'){\n        return(<div className={\"pdf-view\"}><PageViewer pdf={pdfLow} /><footer><button onClick={() => setQuality('')}>Home</button></footer></div>);\n    }\n    else {\n        return(<p>Error loading pdf.</p>);\n    }\n}\nexport default PdfHandler;","import React from 'react';\nimport logo from './logo.svg';\nimport './resources/style.css';\nimport PdfHandler from './components/PdfHandler'\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <PdfHandler />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}